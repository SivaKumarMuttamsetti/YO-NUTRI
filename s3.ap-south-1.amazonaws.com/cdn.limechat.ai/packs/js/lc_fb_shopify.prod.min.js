function LC_Log() {
    console.log("LC_FB", arguments)
}

function LC_copyObject(e) {
    return JSON.parse(JSON.stringify(e))
}

function LC_getQuerystring(e) {
    for (var t = window.location.search.substring(1).split("&"), i = 0; i < t.length; i++) {
        var r = t[i].split("=");
        if (r[0] == e) return r[1]
    }
}
class LC_ShopifyHelper {
    static getCustomerId() {
        let e = window.ShopifyAnalytics || ShopifyAnalytics;
        return meta ? .page ? .customerId || e ? .meta ? .page ? .customerId || __st ? .cid
    }
    static async getCart() {
        let e = {};
        try {
            e = await (await fetch("/cart.js")).json()
        } catch (t) {
            LC_Log("error while fetching cart", t)
        } finally {
            return e
        }
    }
    static getDomain() {
        return (window.Shopify || Shopify).shop
    }
    static getCurrentProductInfo() {
        let e = window.ShopifyAnalytics || ShopifyAnalytics;
        return meta ? .page ? .product || e ? .meta ? .product
    }
    static getCurrentPageMeta() {
        let e = window.ShopifyAnalytics || ShopifyAnalytics;
        return meta ? .page || e ? .meta
    }
}
class LC_FlowBuilder {
    static FB_BASE_URLS = {
        prod: "https://flow-builder.limechat.ai",
        stg: "https://flow-builder-stg.limechat.ai",
        dev: "https://3a10-49-207-215-175.ap.ngrok.io"
    };
    static CART_FETCH_DELAY_MS = 3500;
    static LOCATION_CHANGE_CHECK_DELAY_MS = 3500;
    env = "dev";
    oldCart = {};
    oldUrl = "";
    LOCATION_CHANGE_HANDLERS = [];
    CART_CHECK_TIMER = null;
    LOCATION_CHECK_TIMER = null;
    constructor(e, t = null) {
        this.env = e, t && (this.env = "dev", LC_FlowBuilder.FB_BASE_URLS.dev = t), this.LOCATION_CHANGE_HANDLERS = [{
            regex: /^\/search.*/i,
            handler: this.onUserSearch.bind(this)
        }, {
            regex: /^\/collections\/.*/i,
            handler: this.onUserViewCollection.bind(this)
        }, {
            regex: /^\/products\/.*/i,
            handler: this.onUserViewProduct.bind(this)
        }, ]
    }
    async sendRequestToFB({
        url: e,
        method: t = "GET",
        headers: i = null,
        body: r = null
    } = {}) {
        let a = `${LC_FlowBuilder.FB_BASE_URLS[this.env]}${e}`,
            n = {
                method: t,
                headers: {}
            };
        return r && (n.body = JSON.stringify(r), n.headers = { ...n.headers,
            "Content-type": "application/json; charset=UTF-8"
        }), i && (n.headers = { ...n.headers,
            ...i
        }), await (await fetch(a, n)).json()
    }
    async sendWebhook(e, t) {
        let i = LC_ShopifyHelper.getCustomerId(),
            r = LC_ShopifyHelper.getDomain();
        return t.customerId = i, await this.sendRequestToFB({
            url: "/webhook.handle_shopify_frontend/",
            method: "POST",
            body: t,
            headers: {
                "x-lc-shopify-topic": e,
                "x-lc-shopify-domain": r,
                "x-lc-shopify-cid": i
            }
        })
    }
    hasCartChanged(e) {
        return JSON.stringify(this.oldCart) != JSON.stringify(e)
    }
    async sendCartChangedEvent(e) {
        let t = LC_ShopifyHelper.getCustomerId();
        if (t) return (e = LC_copyObject(e)).customerId = t, await this.sendWebhook("carts/update", e)
    }
    async fetchCartAndSendEventIfChanged() {
        let e = await LC_ShopifyHelper.getCart();
        e ? .item_count > 0 && this.hasCartChanged(e) && (await this.sendCartChangedEvent(e), this.oldCart = e)
    }
    clearCartCheckTimer() {
        this.CART_CHECK_TIMER && (clearInterval(this.CART_CHECK_TIMER), this.CART_CHECK_TIMER = null)
    }
    startCartCheckTimer() {
        this.CART_CHECK_TIMER && this.clearCartCheckTimer(), this.CART_CHECK_TIMER = setInterval(this.fetchCartAndSendEventIfChanged.bind(this), LC_FlowBuilder.CART_FETCH_DELAY_MS), this.fetchCartAndSendEventIfChanged()
    }
    onUserSearch(e) {
        let t = LC_getQuerystring("q");
        this.sendWebhook("users/search", {
            query: t
        })
    }
    onUserViewProduct(e) {
        let t = LC_ShopifyHelper.getCurrentProductInfo(),
            i = e.pathname.split("/")[2];
        t && this.sendWebhook("users/product-view", { ...t,
            name: i
        })
    }
    onUserViewCollection(e) {
        let t = LC_ShopifyHelper.getCurrentPageMeta().resourceId,
            i = e.pathname.split("/")[2];
        this.sendWebhook("users/collection-view", {
            id: t,
            name: i
        })
    }
    async onLocationChange(e) {
        let t = e.pathname;
        for (let i of this.LOCATION_CHANGE_HANDLERS)
            if (i.regex.test(t)) try {
                i.handler(e)
            } catch (r) {
                LC_Log("location_change_handler_failed", i, e)
            }
    }
    async checkLocationChange() {
        let e = window.location;
        this.oldUrl != e.href && (this.onLocationChange(e), this.oldUrl = e.href)
    }
    clearLocationCheckTimer() {
        this.LOCATION_CHECK_TIMER && (clearInterval(this.LOCATION_CHECK_TIMER), this.LOCATION_CHECK_TIMER = null)
    }
    startLocationCheckTimer() {
        this.LOCATION_CHECK_TIMER && this.clearLocationCheckTimer(), this.LOCATION_CHECK_TIMER = setInterval(this.checkLocationChange.bind(this), LC_FlowBuilder.LOCATION_CHANGE_CHECK_DELAY_MS), this.checkLocationChange()
    }
}
window.LC_ShopifyHelper = LC_ShopifyHelper, window.LC_FlowBuilder = LC_FlowBuilder, setTimeout(() => {
    (lc_fb = new LC_FlowBuilder("prod")).startCartCheckTimer(), lc_fb.startLocationCheckTimer()
}, 1e3);